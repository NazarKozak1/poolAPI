# Generated by Django 4.2.16 on 2024-09-11 17:18

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import poolAPI.models
import timezone_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "tz",
                    timezone_field.fields.TimeZoneField(
                        choices_display="WITH_GMT_OFFSET",
                        default="Europe/Amsterdam",
                        verbose_name="Timezone",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="account_groups", to="auth.group"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="account_permissions",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CommandSender",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serialnumber",
                    models.CharField(max_length=30, verbose_name="Serial Number"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PoolBuilder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "street_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Address"
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=30)),
                ("country", models.CharField(blank=True, max_length=30)),
                ("company_name", models.CharField(blank=True, max_length=100)),
                ("company_phone", models.CharField(blank=True, max_length=100)),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="PublicAPI access token, one per user",
                        max_length=255,
                        verbose_name="API token",
                    ),
                ),
                (
                    "api_key_expiration",
                    models.DateField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="API token expiration date",
                    ),
                ),
                (
                    "api_max_per_day",
                    models.IntegerField(
                        blank=True,
                        default=68400,
                        null=True,
                        verbose_name="max API requests per day",
                    ),
                ),
                (
                    "api_last_updated",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last updated"
                    ),
                ),
                (
                    "api_count_today",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="todays API requests"
                    ),
                ),
                (
                    "account",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poolbuilder",
                        to="poolAPI.account",
                    ),
                ),
                (
                    "master",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="poolbuilders",
                        to="poolAPI.account",
                    ),
                ),
            ],
            options={
                "verbose_name": "Poolbuilder",
                "verbose_name_plural": "Poolbuilders",
            },
        ),
        migrations.CreateModel(
            name="PoolOwner",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "street_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Street name"
                    ),
                ),
                (
                    "city",
                    models.CharField(blank=True, max_length=30, verbose_name="City"),
                ),
                (
                    "country",
                    models.CharField(blank=True, max_length=30, verbose_name="Country"),
                ),
                ("latitude", models.FloatField(default=0.0, verbose_name="Latitude")),
                ("longitude", models.FloatField(default=0.0, verbose_name="Longitude")),
                (
                    "account",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owner",
                        to="poolAPI.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PoolSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("poolname", models.CharField(max_length=30, verbose_name="Pool name")),
                (
                    "poolnumber",
                    models.CharField(
                        help_text="Do not change unless PCB is changed",
                        max_length=30,
                        unique=True,
                        verbose_name="Pool Number",
                    ),
                ),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Dirty"
                    ),
                ),
                (
                    "manual_mode",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Manual mode"
                    ),
                ),
                ("latitude", models.FloatField(default=0.0, verbose_name="Latitude")),
                ("longitude", models.FloatField(default=0.0, verbose_name="Longitude")),
                ("version", models.CharField(max_length=5, verbose_name="Version")),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text=" Maximum size 10MB",
                        null=True,
                        upload_to="pool/logos",
                        verbose_name="Pool picture",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="poolAPI.poolowner",
                    ),
                ),
                (
                    "poolbuilder",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pools",
                        to="poolAPI.poolbuilder",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SerialNumberWhiteList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "serialnumber",
                    models.CharField(max_length=30, verbose_name="Serial Number"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StatusPump",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pump", models.IntegerField(default=0, verbose_name="Pump status")),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "poolsetting",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pump",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StatusModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cover", models.IntegerField(default=0, verbose_name="Cover status")),
                (
                    "cover_error",
                    models.IntegerField(default=0, verbose_name="Cover error"),
                ),
                (
                    "filter",
                    models.IntegerField(default=0, verbose_name="Water Filter status"),
                ),
                (
                    "temperature",
                    models.IntegerField(default=0, verbose_name="Temperature status"),
                ),
                (
                    "lighting",
                    models.IntegerField(default=0, verbose_name="Lighting status"),
                ),
                (
                    "waterheight",
                    models.IntegerField(default=0, verbose_name="Waterheight status"),
                ),
                (
                    "aux1",
                    models.IntegerField(
                        default=0, null=True, verbose_name="Aux1 status"
                    ),
                ),
                (
                    "aux2",
                    models.IntegerField(
                        default=0, null=True, verbose_name="Aux2 status"
                    ),
                ),
                (
                    "aux3",
                    models.IntegerField(
                        default=0, null=True, verbose_name="Aux3 status"
                    ),
                ),
                (
                    "aux4",
                    models.IntegerField(
                        default=0, null=True, verbose_name="Aux4 status"
                    ),
                ),
                ("ph", models.IntegerField(default=0, verbose_name="pH")),
                ("rx", models.IntegerField(default=0, verbose_name="Rx")),
                (
                    "clm",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="CLM status",
                    ),
                ),
                (
                    "t_water",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Water temperature status",
                    ),
                ),
                (
                    "t_ambient",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Ambient tempeature status",
                    ),
                ),
                (
                    "t_solar",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Solar temperature status",
                    ),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Water level status",
                    ),
                ),
                (
                    "tds",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="TDS status",
                    ),
                ),
                (
                    "empty",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Empty tank status",
                    ),
                ),
                ("pump", models.IntegerField(default=0, verbose_name="Pump status")),
                (
                    "pumpspeed",
                    models.IntegerField(default=0, verbose_name="Pumpspeed status"),
                ),
                (
                    "backwash",
                    models.IntegerField(default=0, verbose_name="Backwash status"),
                ),
                ("flow", models.IntegerField(default=0, verbose_name="Flow status")),
                (
                    "datetime",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="datetime"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Status model",
                "verbose_name_plural": "Status model",
            },
        ),
        migrations.CreateModel(
            name="StatusFlow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("flow", models.IntegerField(default=0, verbose_name="Flow")),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "poolsetting",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flow",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StatusBackwash",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("backwash", models.IntegerField(default=0, verbose_name="Backwash")),
                ("datetime", models.DateTimeField(db_index=True)),
                (
                    "poolsetting",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backwash",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Status backwash",
                "verbose_name_plural": "Status backwash",
            },
        ),
        migrations.CreateModel(
            name="SettingsWaterSuppletionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "watersuppletion_flow_valve",
                    models.BooleanField(
                        default=False, null=True, verbose_name="Use flow input"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_watersuppletion",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsTimerPumpsModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timerpumps_timer1_wait_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Timer 1 wait time (h)",
                    ),
                ),
                (
                    "timerpumps_timer1_dosing_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Timer 1 dosing time (min)",
                    ),
                ),
                (
                    "timerpumps_timer2_wait_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Timer 2 wait time (h)",
                    ),
                ),
                (
                    "timerpumps_timer2_dosing_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Timer 2 dosing time (min)",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_timerpumps",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsTemperatureSolarModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "temperaturesolar_regulation",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="Solar Temperature regulation",
                    ),
                ),
                (
                    "temperaturesolar_temperature_offset",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        editable=False,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Solar Temperature offset",
                    ),
                ),
                (
                    "temperaturesolar_pump_speed",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        editable=False,
                        validators=[django.core.validators.MaxValueValidator(4)],
                        verbose_name="Solar Temperature pump speed",
                    ),
                ),
                (
                    "temperaturesolar_sp_too_high",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        editable=False,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Solar Temperature SP too high ",
                    ),
                ),
                (
                    "temperaturesolar_sp_high",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        editable=False,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Solar temperature SP high",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_temperaturesolar",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsTemperatureModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "temperature_water_target",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(32.0)],
                        verbose_name="Water temperature desired (°C)",
                    ),
                ),
                (
                    "temperature_frost_protection",
                    models.BooleanField(
                        default=False, verbose_name="Temperature frost protection (old)"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_temperature",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsTemperatureHeatingModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "temperatureheating_regulation",
                    models.BooleanField(
                        default=False, verbose_name="Heating regulation"
                    ),
                ),
                (
                    "temperatureheating_interval",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Heating interval (min)",
                    ),
                ),
                (
                    "temperatureheating_priority",
                    models.BooleanField(default=False, verbose_name="Heating priority"),
                ),
                (
                    "temperatureheating_cooling_period",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Heating cooling period (s)",
                    ),
                ),
                (
                    "temperatureheating_pump_speed",
                    models.IntegerField(
                        choices=[
                            (0, "Off"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Maximum"),
                        ],
                        default=0,
                        verbose_name="Heating pump speed",
                    ),
                ),
                (
                    "temperature_frost_protection",
                    models.BooleanField(
                        default=False, verbose_name="Temperature frost protection"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_temperatureheating",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsRxModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rx_value_target",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Desired Rx value (mV)",
                    ),
                ),
                (
                    "rx_value_target_ppm",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        validators=[django.core.validators.MaxValueValidator(5)],
                        verbose_name="Desired Rx value (ppm)",
                    ),
                ),
                (
                    "rx_dosing_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(3600)],
                        verbose_name="Dosing time Rx (s)",
                    ),
                ),
                (
                    "rx_pausing_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Pause time (min)",
                    ),
                ),
                (
                    "rx_overdose_alert",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(65)],
                        verbose_name="Overdose alarm (l / 4h)",
                    ),
                ),
                (
                    "rx_min_water_temp",
                    poolAPI.models.FloatRangeField(
                        default=0.0,
                        validators=[django.core.validators.MaxValueValidator(99)],
                        verbose_name="Threshold water temperature (°C)",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_rx",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsPhModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ph_value_target",
                    poolAPI.models.FloatRangeField(
                        default=7.0,
                        validators=[
                            django.core.validators.MinValueValidator(4),
                            django.core.validators.MaxValueValidator(9),
                        ],
                        verbose_name="Desired pH value",
                    ),
                ),
                (
                    "ph_dosing_time",
                    poolAPI.models.IntegerRangeField(
                        default=100,
                        validators=[django.core.validators.MaxValueValidator(3600)],
                        verbose_name="Dosing time pH (s)",
                    ),
                ),
                (
                    "ph_pausing_time",
                    poolAPI.models.IntegerRangeField(
                        default=100,
                        validators=[django.core.validators.MaxValueValidator(1440)],
                        verbose_name="Pausing time pH (min)",
                    ),
                ),
                (
                    "ph_dosing_choice",
                    models.IntegerField(
                        choices=[(0, "pH+"), (1, "pH-"), (2, "pH+ & pH-")],
                        default=0,
                        verbose_name="Dosing choice pH",
                    ),
                ),
                (
                    "ph_overdose_alert",
                    poolAPI.models.IntegerRangeField(
                        default=65,
                        validators=[django.core.validators.MaxValueValidator(65)],
                        verbose_name="Overdose Alarm (l / 4h)",
                    ),
                ),
                (
                    "ph_hysteresis",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(1)],
                        verbose_name="Hysteresis",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_ph",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsLightingModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lighting_regulation",
                    models.BooleanField(
                        default=False, verbose_name="Lighting regulation"
                    ),
                ),
                (
                    "lighting_active",
                    models.BooleanField(default=False, verbose_name="Lighting active"),
                ),
                (
                    "lighting_schedule",
                    models.BooleanField(
                        default=False, verbose_name="Lighting schedule"
                    ),
                ),
                (
                    "lighting_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Lighting start time",
                    ),
                ),
                (
                    "lighting_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Lighting stop time",
                    ),
                ),
                (
                    "lighting_monday",
                    models.BooleanField(default=False, verbose_name="Lighting monday"),
                ),
                (
                    "lighting_tuesday",
                    models.BooleanField(default=False, verbose_name="Lighting tuesday"),
                ),
                (
                    "lighting_wednesday",
                    models.BooleanField(
                        default=False, verbose_name="Lighting wednesday"
                    ),
                ),
                (
                    "lighting_thursday",
                    models.BooleanField(
                        default=False, verbose_name="Lighting thursday"
                    ),
                ),
                (
                    "lighting_friday",
                    models.BooleanField(default=False, verbose_name="LIghting friday"),
                ),
                (
                    "lighting_saturday",
                    models.BooleanField(
                        default=False, verbose_name="Lighting saturday"
                    ),
                ),
                (
                    "lighting_sunday",
                    models.BooleanField(default=False, verbose_name="Lighting sunday"),
                ),
                (
                    "lighting_on_deck_closed",
                    models.BooleanField(
                        default=False, verbose_name="Switch off when cover is closed"
                    ),
                ),
                (
                    "lighting_configuration",
                    models.IntegerField(
                        choices=[
                            (0, "Single Colour"),
                            (1, "Rotating RGB"),
                            (2, "STL-RGB"),
                        ],
                        default=0,
                        verbose_name="Lighting configuration",
                    ),
                ),
                (
                    "lighting_colour_stl",
                    models.IntegerField(
                        choices=[
                            (0, "White"),
                            (1, "Red"),
                            (2, "Blue"),
                            (3, "Green"),
                            (4, "Magenta"),
                            (5, "Cyan"),
                            (6, "Yellow"),
                            (7, "Seq1"),
                            (8, "Seq2"),
                            (9, "Seq3"),
                            (10, "Seq4"),
                            (11, "Seq5"),
                            (12, "Disco1"),
                            (13, "Disco2"),
                        ],
                        default=0,
                        verbose_name="LIghting colour STI",
                    ),
                ),
                (
                    "lighting_rgb_stl_time",
                    poolAPI.models.IntegerRangeField(
                        default=150,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="STL Rotating RGB Pulse time",
                    ),
                ),
                (
                    "lighting_next_colour",
                    models.BooleanField(
                        default=False, verbose_name="Lighting next colour"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_lighting",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsFilterSchedule3Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filterschedule3_enabled",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 enabled"
                    ),
                ),
                (
                    "filterschedule3_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Filter schedule 3 start time",
                    ),
                ),
                (
                    "filterschedule3_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Filter schedule 3 stop time",
                    ),
                ),
                (
                    "filterschedule3_monday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 monday"
                    ),
                ),
                (
                    "filterschedule3_tuesday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 tuesday"
                    ),
                ),
                (
                    "filterschedule3_wednesday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 wednesday"
                    ),
                ),
                (
                    "filterschedule3_thursday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 thursday"
                    ),
                ),
                (
                    "filterschedule3_friday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 friday"
                    ),
                ),
                (
                    "filterschedule3_saturday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 saturday"
                    ),
                ),
                (
                    "filterschedule3_sunday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 3 sunday"
                    ),
                ),
                (
                    "filterschedule3_pump_speed",
                    models.IntegerField(
                        choices=[
                            (0, "Off"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Maximum"),
                        ],
                        default=0,
                        verbose_name="Filter schedule 3 pump speed",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_filterschedule3",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsFilterSchedule2Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filterschedule2_enabled",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 enabled"
                    ),
                ),
                (
                    "filterschedule2_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Filter schedule 2 start time",
                    ),
                ),
                (
                    "filterschedule2_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Filter schedule 2 stop time",
                    ),
                ),
                (
                    "filterschedule2_monday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 monday"
                    ),
                ),
                (
                    "filterschedule2_tuesday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 tuesday"
                    ),
                ),
                (
                    "filterschedule2_wednesday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 wednesday"
                    ),
                ),
                (
                    "filterschedule2_thursday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 thursday"
                    ),
                ),
                (
                    "filterschedule2_friday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 friday"
                    ),
                ),
                (
                    "filterschedule2_saturday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 saturday"
                    ),
                ),
                (
                    "filterschedule2_sunday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 2 sunday"
                    ),
                ),
                (
                    "filterschedule2_pump_speed",
                    models.IntegerField(
                        choices=[
                            (0, "Off"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Maximum"),
                        ],
                        default=0,
                        verbose_name="Filter schedule 2 pump speed",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_filterschedule2",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsFilterSchedule1Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filterschedule1_enabled",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 enabled"
                    ),
                ),
                (
                    "filterschedule1_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Filter schedule 1 start time",
                    ),
                ),
                (
                    "filterschedule1_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Filter schedule 1 stop time",
                    ),
                ),
                (
                    "filterschedule1_monday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 monday"
                    ),
                ),
                (
                    "filterschedule1_tuesday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 tuesday"
                    ),
                ),
                (
                    "filterschedule1_wednesday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 wednesday"
                    ),
                ),
                (
                    "filterschedule1_thursday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 thursday"
                    ),
                ),
                (
                    "filterschedule1_friday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 friday"
                    ),
                ),
                (
                    "filterschedule1_saturday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 saturday"
                    ),
                ),
                (
                    "filterschedule1_sunday",
                    models.BooleanField(
                        default=False, verbose_name="Filter schedule 1 sunday"
                    ),
                ),
                (
                    "filterschedule1_pump_speed",
                    models.IntegerField(
                        choices=[
                            (0, "Off"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Maximum"),
                        ],
                        default=0,
                        verbose_name="Filter schedule 1 pump speed",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_filterschedule1",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsFilterModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filter_pump_force_on",
                    models.BooleanField(
                        default=False, verbose_name="Filter pump force on"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_filter",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsEnergytool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "energytool_enabled",
                    models.BooleanField(
                        default=False, verbose_name="Energytool enabled"
                    ),
                ),
                (
                    "minimum_water_temperature",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        help_text="Heating always activates when water temperature below this minimum",
                        validators=[django.core.validators.MaxValueValidator(30)],
                        verbose_name="Minimum water temperature (°C)",
                    ),
                ),
                (
                    "cheap_energy",
                    models.FloatField(
                        default=0.15,
                        help_text="Cheap energy will activate the heating towards good temperature",
                        verbose_name="Cheap energy (€/Kwh)",
                    ),
                ),
                (
                    "good_temperature",
                    poolAPI.models.FloatRangeField(
                        default=25,
                        validators=[django.core.validators.MaxValueValidator(30)],
                        verbose_name="Good water temperature (°C)",
                    ),
                ),
                (
                    "very_cheap_energy",
                    models.FloatField(
                        default=0.1,
                        help_text="Very cheap energy will activate the heating towards GREAT water temperature",
                        verbose_name="Very cheap energy (€/Kwh)",
                    ),
                ),
                (
                    "great_temperature",
                    poolAPI.models.FloatRangeField(
                        default=28,
                        validators=[django.core.validators.MaxValueValidator(30)],
                        verbose_name="Great water temperature (°C)",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_energytool",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsEcoValveModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filterecovalve_always_active",
                    models.BooleanField(
                        default=False, verbose_name="Filter ecovalve always active"
                    ),
                ),
                (
                    "filterecovalve_buffertank",
                    models.BooleanField(
                        default=False, verbose_name="Filter ecovalve buffertank"
                    ),
                ),
                (
                    "filterecovalve_mode",
                    models.IntegerField(
                        choices=[
                            (0, "Off"),
                            (1, "Always on"),
                            (2, "Buffertank Regulation"),
                        ],
                        default=0,
                        verbose_name="Filter ecovalve mode",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_ecovalve",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsDeckModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "deck_open",
                    models.BooleanField(default=False, verbose_name="Deck open"),
                ),
                (
                    "deck_close",
                    models.BooleanField(default=False, verbose_name="Deck close"),
                ),
                (
                    "deck_stop",
                    models.BooleanField(default=False, verbose_name="Deck stop"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_deck",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsBackwashModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filterbackwash_regulation",
                    models.BooleanField(
                        default=False, verbose_name="Filter backwash regulation"
                    ),
                ),
                (
                    "filterbackwash_interval_period",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="In days or weeks",
                        verbose_name="Filter backwash interval period",
                    ),
                ),
                (
                    "filterbackwash_pump_speed",
                    models.IntegerField(
                        choices=[
                            (0, "Off"),
                            (1, "Low"),
                            (2, "Medium"),
                            (3, "High"),
                            (4, "Maximum"),
                        ],
                        default=0,
                        verbose_name="Filter backwash pump speed",
                    ),
                ),
                (
                    "filterbackwash_backwash_duration",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Backwash duration (s)",
                    ),
                ),
                (
                    "filterbackwash_rinse_duration",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Rinse duration (s)",
                    ),
                ),
                (
                    "filterbackwash_config_rinse",
                    models.BooleanField(
                        default=False, verbose_name="Filter backwash config rinse"
                    ),
                ),
                (
                    "filterbackwash_start",
                    models.BooleanField(
                        default=False, verbose_name="Filter backwash start"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_backwash",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsAux4Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aux4_regulation",
                    models.BooleanField(default=False, verbose_name="Aux 4 regulation"),
                ),
                (
                    "aux4_activate",
                    models.BooleanField(default=False, verbose_name="Aux 4 activate"),
                ),
                (
                    "aux4_flow",
                    models.BooleanField(
                        default=False, verbose_name="Aux 4 Flow Control"
                    ),
                ),
                (
                    "aux4_schedule",
                    models.BooleanField(default=False, verbose_name="Aux 4 schedule"),
                ),
                (
                    "aux4_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 4 start time",
                    ),
                ),
                (
                    "aux4_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 4 stop time",
                    ),
                ),
                (
                    "aux4_monday",
                    models.BooleanField(default=False, verbose_name="Aux 4 monday"),
                ),
                (
                    "aux4_tuesday",
                    models.BooleanField(default=False, verbose_name="Aux 3 tuesday"),
                ),
                (
                    "aux4_wednesday",
                    models.BooleanField(default=False, verbose_name="Aux 4 wednesday"),
                ),
                (
                    "aux4_thursday",
                    models.BooleanField(default=False, verbose_name="Aux 4 thursday"),
                ),
                (
                    "aux4_friday",
                    models.BooleanField(default=False, verbose_name="Aux 4 friday"),
                ),
                (
                    "aux4_saturday",
                    models.BooleanField(default=False, verbose_name="Aux 4 saturday"),
                ),
                (
                    "aux4_sunday",
                    models.BooleanField(default=False, verbose_name="Aux 4 sunday"),
                ),
                (
                    "aux4_name",
                    models.IntegerField(
                        choices=[
                            (0, "Desinfection-1"),
                            (1, "Desinfection-2"),
                            (2, "Fountain-1"),
                            (3, "Fountain-2"),
                            (4, "Lighting-1"),
                            (5, "Lighting-2"),
                            (6, "Valve-1"),
                            (7, "Valve-2"),
                            (8, "GardenLighting-1"),
                            (9, "GardenLighting-2"),
                            (10, "Reverse Flow Machine"),
                            (11, "Domotica"),
                            (12, "Garden Fence"),
                            (13, "Window Blinds"),
                            (14, "None"),
                            (15, "Other"),
                        ],
                        default=0,
                        verbose_name="Aux 4 name",
                    ),
                ),
                (
                    "aux4_on_deck_closed",
                    models.BooleanField(
                        default=False, verbose_name="Switch off when cover is closed"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_aux4",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsAux3Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aux3_regulation",
                    models.BooleanField(default=False, verbose_name="Aux 3 regulation"),
                ),
                (
                    "aux3_activate",
                    models.BooleanField(default=False, verbose_name="Aux 3 activate"),
                ),
                (
                    "aux3_flow",
                    models.BooleanField(
                        default=False, verbose_name="Aux 3 Flow Control"
                    ),
                ),
                (
                    "aux3_name",
                    models.IntegerField(
                        choices=[
                            (0, "Desinfection-1"),
                            (1, "Desinfection-2"),
                            (2, "Fountain-1"),
                            (3, "Fountain-2"),
                            (4, "Lighting-1"),
                            (5, "Lighting-2"),
                            (6, "Valve-1"),
                            (7, "Valve-2"),
                            (8, "GardenLighting-1"),
                            (9, "GardenLighting-2"),
                            (10, "Reverse Flow Machine"),
                            (11, "Domotica"),
                            (12, "Garden Fence"),
                            (13, "Window Blinds"),
                            (14, "None"),
                            (15, "Other"),
                        ],
                        default=0,
                        verbose_name="Aux 3 name",
                    ),
                ),
                (
                    "aux3_on_deck_closed",
                    models.BooleanField(
                        default=False, verbose_name="Switch off when cover is closed"
                    ),
                ),
                (
                    "aux3_schedule",
                    models.BooleanField(default=False, verbose_name="Aux 3 schedule"),
                ),
                (
                    "aux3_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 3 start time",
                    ),
                ),
                (
                    "aux3_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 3 stop time",
                    ),
                ),
                (
                    "aux3_monday",
                    models.BooleanField(default=False, verbose_name="Aux 3 monday"),
                ),
                (
                    "aux3_tuesday",
                    models.BooleanField(default=False, verbose_name="Aux 3 tuesday"),
                ),
                (
                    "aux3_wednesday",
                    models.BooleanField(default=False, verbose_name="Aux 3 wednesday "),
                ),
                (
                    "aux3_thursday",
                    models.BooleanField(default=False, verbose_name="Aux 3 thursday"),
                ),
                (
                    "aux3_friday",
                    models.BooleanField(default=False, verbose_name="Aux 3 friday"),
                ),
                (
                    "aux3_saturday",
                    models.BooleanField(default=False, verbose_name="Aux 3 saturday"),
                ),
                (
                    "aux3_sunday",
                    models.BooleanField(default=False, verbose_name="Aux 3 sunday"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_aux3",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsAux2Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aux2_regulation",
                    models.BooleanField(default=False, verbose_name="Aux 2 regulation"),
                ),
                (
                    "aux2_activate",
                    models.BooleanField(default=False, verbose_name="Aux 2 activate"),
                ),
                (
                    "aux2_name",
                    models.IntegerField(
                        choices=[
                            (0, "Desinfection-1"),
                            (1, "Desinfection-2"),
                            (2, "Fountain-1"),
                            (3, "Fountain-2"),
                            (4, "Lighting-1"),
                            (5, "Lighting-2"),
                            (6, "Valve-1"),
                            (7, "Valve-2"),
                            (8, "GardenLighting-1"),
                            (9, "GardenLighting-2"),
                            (10, "Reverse Flow Machine"),
                            (11, "Domotica"),
                            (12, "Garden Fence"),
                            (13, "Window Blinds"),
                            (14, "None"),
                            (15, "Other"),
                        ],
                        default=0,
                        verbose_name="Aux 2 name",
                    ),
                ),
                (
                    "aux2_flow",
                    models.BooleanField(
                        default=False, verbose_name="Aux 2 flow control"
                    ),
                ),
                (
                    "aux2_on_deck_closed",
                    models.BooleanField(
                        default=False, verbose_name="Switch off when cover is closed"
                    ),
                ),
                (
                    "aux2_schedule",
                    models.BooleanField(default=False, verbose_name="Aux 2 schedule"),
                ),
                (
                    "aux2_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 2 start time",
                    ),
                ),
                (
                    "aux2_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 2 stop time",
                    ),
                ),
                (
                    "aux2_monday",
                    models.BooleanField(default=False, verbose_name="Aux 2 monday"),
                ),
                (
                    "aux2_tuesday",
                    models.BooleanField(default=False, verbose_name="Aux 2 tuesday"),
                ),
                (
                    "aux2_wednesday",
                    models.BooleanField(default=False, verbose_name="Aux 2 wednesdy"),
                ),
                (
                    "aux2_thursday",
                    models.BooleanField(default=False, verbose_name="Aux 2 thursday"),
                ),
                (
                    "aux2_friday",
                    models.BooleanField(default=False, verbose_name="Aux 2 friday"),
                ),
                (
                    "aux2_saturday",
                    models.BooleanField(default=False, verbose_name="Aux 2 saturday"),
                ),
                (
                    "aux2_sunday",
                    models.BooleanField(default=False, verbose_name="Aux 2 sunday"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_aux2",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SettingsAux1Model",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aux1_regulation",
                    models.BooleanField(default=False, verbose_name="Aux 1 regulation"),
                ),
                (
                    "aux1_activate",
                    models.BooleanField(default=False, verbose_name="Aux 1 activate"),
                ),
                (
                    "aux1_name",
                    models.IntegerField(
                        choices=[
                            (0, "Desinfection-1"),
                            (1, "Desinfection-2"),
                            (2, "Fountain-1"),
                            (3, "Fountain-2"),
                            (4, "Lighting-1"),
                            (5, "Lighting-2"),
                            (6, "Valve-1"),
                            (7, "Valve-2"),
                            (8, "GardenLighting-1"),
                            (9, "GardenLighting-2"),
                            (10, "Reverse Flow Machine"),
                            (11, "Domotica"),
                            (12, "Garden Fence"),
                            (13, "Window Blinds"),
                            (14, "None"),
                            (15, "Other"),
                        ],
                        default=0,
                        verbose_name="Aux 1 name ",
                    ),
                ),
                (
                    "aux1_flow",
                    models.BooleanField(
                        default=False, verbose_name="Aux 1 flow control"
                    ),
                ),
                (
                    "aux1_on_deck_closed",
                    models.BooleanField(
                        default=False, verbose_name="Switch off when cover is closed"
                    ),
                ),
                (
                    "aux1_schedule",
                    models.BooleanField(default=False, verbose_name="Aux 1 schedule"),
                ),
                (
                    "aux1_start_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 1 start time",
                    ),
                ),
                (
                    "aux1_stop_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Aux 1 stop time",
                    ),
                ),
                (
                    "aux1_monday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Monday"),
                ),
                (
                    "aux1_tuesday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Tuesday"),
                ),
                (
                    "aux1_wednesday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Wednesday"),
                ),
                (
                    "aux1_thursday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Thursday"),
                ),
                (
                    "aux1_friday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Friday"),
                ),
                (
                    "aux1_saturday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Saturday"),
                ),
                (
                    "aux1_sunday",
                    models.BooleanField(default=False, verbose_name="Aux 1 Sunday"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_aux1",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegulationModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Dirty"
                    ),
                ),
                (
                    "lighting_regulation",
                    models.BooleanField(
                        default=False, verbose_name="Lighting regulation"
                    ),
                ),
                (
                    "ph_regulation",
                    models.BooleanField(default=False, verbose_name="pH"),
                ),
                (
                    "rx_regulation",
                    models.BooleanField(default=False, verbose_name="Rx"),
                ),
                (
                    "electrolyse_regulation",
                    models.BooleanField(
                        default=False, verbose_name="Electrolyse regulation"
                    ),
                ),
                (
                    "flake_regulation",
                    models.BooleanField(default=False, verbose_name="Flake regulation"),
                ),
                (
                    "timer_regulation",
                    models.BooleanField(default=False, verbose_name="Timer regulation"),
                ),
                (
                    "shock_regulation",
                    models.BooleanField(default=False, verbose_name="Shock regulation"),
                ),
                (
                    "tds_regulation",
                    models.BooleanField(default=False, verbose_name="RDS regulation"),
                ),
                (
                    "temperature_regulation",
                    models.BooleanField(
                        default=False, verbose_name="Temperature regulation"
                    ),
                ),
                (
                    "cover_regulation",
                    models.BooleanField(default=False, verbose_name="Cover regulation"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="regulation",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PoolSpecificUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Dirty"
                    ),
                ),
                (
                    "gui_version",
                    models.CharField(max_length=10, verbose_name="New Gui version"),
                ),
                (
                    "main_version",
                    models.CharField(max_length=10, verbose_name="New Main version"),
                ),
                (
                    "io_version",
                    models.CharField(max_length=10, verbose_name="New IO version"),
                ),
                (
                    "eh_version",
                    models.CharField(max_length=10, verbose_name="New EH version"),
                ),
                (
                    "wl_version",
                    models.CharField(max_length=10, verbose_name="New WL version"),
                ),
                (
                    "deck_version",
                    models.CharField(max_length=10, verbose_name="New Deck version"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pool_specific_update",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotificationWarnings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ph",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="pH status",
                    ),
                ),
                (
                    "rx",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Rx status",
                    ),
                ),
                (
                    "clm",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="CLM status",
                    ),
                ),
                (
                    "t_water",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Water temperature status",
                    ),
                ),
                (
                    "t_ambient",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Ambient tempeature status",
                    ),
                ),
                (
                    "t_solar",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Solar temperature status",
                    ),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Water level status",
                    ),
                ),
                (
                    "tds",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="TDS status",
                    ),
                ),
                (
                    "empty",
                    models.IntegerField(
                        choices=[(0, "Good"), (1, "Fault")],
                        default=0,
                        verbose_name="Empty tank status",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotificationLimitModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ph_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="pH measurement notification"
                    ),
                ),
                (
                    "ph_min_limit",
                    poolAPI.models.FloatRangeField(
                        default=4.0,
                        validators=[
                            django.core.validators.MinValueValidator(4),
                            django.core.validators.MaxValueValidator(9),
                        ],
                        verbose_name="pH minimum value",
                    ),
                ),
                (
                    "ph_max_limit",
                    poolAPI.models.FloatRangeField(
                        default=9.0,
                        validators=[
                            django.core.validators.MinValueValidator(4.1),
                            django.core.validators.MaxValueValidator(9),
                        ],
                        verbose_name="pH maximum value",
                    ),
                ),
                (
                    "ph_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="pH delay time for email",
                    ),
                ),
                (
                    "ph_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="pH Notification Time elapsed",
                    ),
                ),
                (
                    "ph_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="pH Mail Time elapsed",
                    ),
                ),
                (
                    "rx_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="Rx measurement notification"
                    ),
                ),
                (
                    "rx_min_limit",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(10000)],
                        verbose_name="Rx minimum value (mV)",
                    ),
                ),
                (
                    "rx_max_limit",
                    poolAPI.models.FloatRangeField(
                        default=800,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name="Rx maximum value (mV)",
                    ),
                ),
                (
                    "rx_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Rx delay time for email",
                    ),
                ),
                (
                    "rx_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="RX Notification Time elapsed",
                    ),
                ),
                (
                    "rx_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="RX Mail Time elapsed",
                    ),
                ),
                (
                    "clm_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="CLM measurement notification"
                    ),
                ),
                (
                    "clm_min_limit",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(3)],
                        verbose_name="CLM minimum value (ppm)",
                    ),
                ),
                (
                    "clm_max_limit",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(3)],
                        verbose_name="CLM maximum value (ppm)",
                    ),
                ),
                (
                    "clm_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Clm delay time for email",
                    ),
                ),
                (
                    "clm_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="CLM Notification Time elapsed",
                    ),
                ),
                (
                    "clm_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="CLM Mail Time Elapsed",
                    ),
                ),
                (
                    "water_notification_measurement",
                    models.BooleanField(
                        default=False,
                        verbose_name="Water temperature measurement notification",
                    ),
                ),
                (
                    "water_min_limit",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(40)],
                        verbose_name="Water Temperature minimum (°C)",
                    ),
                ),
                (
                    "water_max_limit",
                    poolAPI.models.FloatRangeField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(40),
                        ],
                        verbose_name="Water Temperature maximum (°C)",
                    ),
                ),
                (
                    "water_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Water Temperature delay time for email",
                    ),
                ),
                (
                    "water_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Water Temperature Notification time elapsed",
                    ),
                ),
                (
                    "water_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Water temperature maximum (°C)",
                    ),
                ),
                (
                    "ambient_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="Ambient measurement notification"
                    ),
                ),
                (
                    "ambient_min_limit",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(60)],
                        verbose_name="Ambient temperature minimum (°C)",
                    ),
                ),
                (
                    "ambient_max_limit",
                    poolAPI.models.FloatRangeField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(60),
                        ],
                        verbose_name="Ambient temperature maximum (°C)",
                    ),
                ),
                (
                    "ambient_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Ambient temperature delay time for email",
                    ),
                ),
                (
                    "ambient_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Ambient temperature notification time elapsed",
                    ),
                ),
                (
                    "ambient_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Ambient temperature email time elapsed",
                    ),
                ),
                (
                    "solar_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="Solar measurement notification"
                    ),
                ),
                (
                    "solar_min_limit",
                    poolAPI.models.FloatRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(99)],
                        verbose_name="Solar temperature minimum (°C)",
                    ),
                ),
                (
                    "solar_max_limit",
                    poolAPI.models.FloatRangeField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(99),
                        ],
                        verbose_name="Solar temperature maximum (°C)",
                    ),
                ),
                (
                    "solar_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Solar temperature delay time for email",
                    ),
                ),
                (
                    "solar_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Solar notification time elapsed",
                    ),
                ),
                (
                    "solar_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Solar mail time elapsed",
                    ),
                ),
                (
                    "level_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="Level measurement notification"
                    ),
                ),
                (
                    "level_min_limit",
                    models.IntegerField(
                        choices=[
                            (0, "Too low"),
                            (1, "Low"),
                            (2, "Ok"),
                            (3, "High"),
                            (4, "Too high"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "level_max_limit",
                    models.IntegerField(
                        choices=[
                            (0, "Too low"),
                            (1, "Low"),
                            (2, "Ok"),
                            (3, "High"),
                            (4, "Too high"),
                        ],
                        default=4,
                    ),
                ),
                (
                    "level_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Level delay time for email (min)",
                    ),
                ),
                (
                    "level_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        )
                    ),
                ),
                (
                    "level_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        )
                    ),
                ),
                (
                    "tds_notification_measurement",
                    models.BooleanField(
                        default=False,
                        help_text="Conductivity (salt or pollution)",
                        verbose_name="TDS measurement notification",
                    ),
                ),
                (
                    "tds_min_limit",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(10000)],
                        verbose_name="Tds minimum limit",
                    ),
                ),
                (
                    "tds_max_limit",
                    poolAPI.models.IntegerRangeField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name="Tds maximum limit",
                    ),
                ),
                (
                    "tds_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="TDS delay time for email",
                    ),
                ),
                (
                    "tds_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="TDS Notification Time Elapsed",
                    ),
                ),
                (
                    "tds_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="TDS Email Time Elapsed",
                    ),
                ),
                (
                    "empty_notification_measurement",
                    models.BooleanField(
                        default=False, verbose_name="Empty tank notification"
                    ),
                ),
                (
                    "empty_notification_time",
                    models.TimeField(
                        default=datetime.datetime(1970, 1, 1, 0, 0),
                        verbose_name="Empty tank delay time for email",
                    ),
                ),
                (
                    "empty_notification_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Empty tank notification time elapsed",
                    ),
                ),
                (
                    "empty_mail_time_elapsed",
                    models.DateTimeField(
                        default=datetime.datetime(
                            1970, 1, 1, 1, 0, tzinfo=datetime.timezone.utc
                        ),
                        verbose_name="Empty tank mail time elapsed",
                    ),
                ),
                (
                    "email1",
                    models.EmailField(
                        blank=True,
                        default="",
                        max_length=254,
                        verbose_name="Your emailaddress for notifications",
                    ),
                ),
                (
                    "email2",
                    models.EmailField(
                        blank=True,
                        default="",
                        max_length=254,
                        verbose_name="Second email for notifications",
                    ),
                ),
                (
                    "email3",
                    models.EmailField(
                        blank=True,
                        default="",
                        max_length=254,
                        verbose_name="Third email for notifications",
                    ),
                ),
                (
                    "email4",
                    models.EmailField(
                        blank=True,
                        default="",
                        max_length=254,
                        verbose_name="Fourth email for notifications",
                    ),
                ),
                (
                    "email5",
                    models.EmailField(
                        blank=True,
                        default="",
                        max_length=254,
                        verbose_name="Fifth email for notifications",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guards",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
            },
        ),
        migrations.CreateModel(
            name="LogModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_main",
                    models.TextField(max_length=100000, verbose_name="Main log"),
                ),
                (
                    "log_gui",
                    models.TextField(max_length=100000, verbose_name="GUI log"),
                ),
                (
                    "log_cloud",
                    models.TextField(max_length=100000, verbose_name="Cloud log"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logging",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "water_temperature",
                    models.FloatField(
                        default=20, verbose_name=("Water Temperature", "°C")
                    ),
                ),
                (
                    "ambient_temperature",
                    models.FloatField(
                        default=20, verbose_name=("Ambient Temperature", "°C")
                    ),
                ),
                (
                    "solar_temperature",
                    models.FloatField(
                        default=20, verbose_name=("Solar Temperature", "°C")
                    ),
                ),
                (
                    "filterpump_current",
                    models.FloatField(
                        default=1, verbose_name=("Filterpump Power", "W")
                    ),
                ),
                ("ph", models.FloatField(default=7, verbose_name=("pH", ""))),
                ("rx", models.FloatField(default=200, verbose_name=("Rx level", "mV"))),
                (
                    "tds_ppm",
                    models.FloatField(default=200, verbose_name=("TDS", "ppm")),
                ),
                (
                    "clm_ppm",
                    models.FloatField(default=600, verbose_name=("Chlorine", "ppm")),
                ),
                ("time", models.DateTimeField(verbose_name="time")),
                (
                    "poolsetting",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historicaldata",
                "verbose_name_plural": "Historicaldata",
            },
        ),
        migrations.CreateModel(
            name="FirmwareVersionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "version_gui",
                    models.CharField(
                        default="", max_length=6, verbose_name="Version GUI"
                    ),
                ),
                (
                    "version_main",
                    models.CharField(
                        default="", max_length=6, verbose_name="Version Main"
                    ),
                ),
                (
                    "version_io",
                    models.CharField(
                        default="", max_length=6, verbose_name="Versoin IO"
                    ),
                ),
                (
                    "version_eh",
                    models.CharField(
                        default="", max_length=6, verbose_name="Version EH"
                    ),
                ),
                (
                    "version_wl",
                    models.CharField(
                        default="", max_length=6, verbose_name="Version WL"
                    ),
                ),
                (
                    "version_deck",
                    models.CharField(
                        default="", max_length=6, verbose_name="Version Deck"
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Last updated"
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="firmware_version",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Eps",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "street_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Address"
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=30)),
                ("country", models.CharField(blank=True, max_length=30)),
                ("company_name", models.CharField(blank=True, max_length=100)),
                ("company_phone", models.CharField(blank=True, max_length=100)),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="eps/logos",
                        verbose_name="Logo",
                    ),
                ),
                (
                    "account",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="eps",
                        to="poolAPI.account",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ControlPanelModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Dirty"
                    ),
                ),
                ("aux1", models.BooleanField(default=False)),
                ("aux2", models.BooleanField(default=False)),
                ("aux3", models.BooleanField(default=False)),
                ("aux4", models.BooleanField(default=False)),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="controlpanel",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "ControlPanel",
                "verbose_name_plural": "ControlPanel",
            },
        ),
        migrations.CreateModel(
            name="ConnectEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip", models.CharField(db_index=True, max_length=230)),
                ("count", models.IntegerField(default=0)),
                ("first_time", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_time", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "poolsetting",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="connect_event",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ConfigurationModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False, editable=False, verbose_name=" Dirty"
                    ),
                ),
                (
                    "volume_pool_m3",
                    models.IntegerField(default=0, verbose_name="Volume pool m3"),
                ),
                (
                    "io_control_available",
                    models.BooleanField(default=False, verbose_name="IO Control"),
                ),
                (
                    "eh_control_available",
                    models.BooleanField(default=False, verbose_name="EH control"),
                ),
                (
                    "main_eh_control_available",
                    models.BooleanField(default=False, verbose_name="TDS Salt"),
                ),
                (
                    "tds_sensor_available",
                    models.BooleanField(default=False, verbose_name="TDS Pollution"),
                ),
                (
                    "water_level_sensor_available",
                    models.BooleanField(
                        default=False, verbose_name="Water Level Sensor"
                    ),
                ),
                (
                    "clm_sensor_available",
                    models.BooleanField(default=False, verbose_name="CLM Sensor"),
                ),
                (
                    "external_off_available",
                    models.BooleanField(default=False, verbose_name="External Off"),
                ),
                (
                    "deck_available",
                    models.BooleanField(default=False, verbose_name="Deck Enable"),
                ),
                (
                    "covco_deck_available",
                    models.BooleanField(
                        default=False, verbose_name="Covco Deck (NEXUS)"
                    ),
                ),
                (
                    "remote_deck_control",
                    models.BooleanField(
                        default=False, verbose_name="Remote Deck Control"
                    ),
                ),
                (
                    "pump_type",
                    models.IntegerField(
                        choices=[
                            (0, "Pump Single Speed"),
                            (1, "Pentair SuperFlo"),
                            (2, "Pentair Intelliflo"),
                            (3, "Pump STL Inverter"),
                            (4, "Davey Promaster"),
                            (5, "Invertek Optidrive"),
                            (6, "Speck BADU Eco Touch Pro"),
                            (7, "Speck BADU 90 Eco Motion"),
                            (8, "Hayward Ecostar"),
                            (9, "Hayward VSTD"),
                            (10, "Zodiac Flo Pro VS"),
                            (11, "No Pump"),
                        ],
                        default=0,
                        verbose_name="Pump type",
                    ),
                ),
                (
                    "backwash_valve_type",
                    models.IntegerField(
                        choices=[
                            (0, "Semi-automatic"),
                            (1, "Pneumatic valve"),
                            (2, "Auto valve"),
                        ],
                        default=0,
                        verbose_name="Backwash valve type",
                    ),
                ),
                (
                    "sewer_config",
                    models.IntegerField(
                        choices=[
                            (0, "No sewer valve"),
                            (1, "Manual sewer valve"),
                            (2, "Automatic sewer valve"),
                        ],
                        default=0,
                        verbose_name="Sewer config",
                    ),
                ),
                (
                    "filterpump_stl",
                    models.BooleanField(default=False, verbose_name="Filterpump STL"),
                ),
                (
                    "watertemperature_protection",
                    models.BooleanField(
                        default=False, verbose_name="Watertemperature protection"
                    ),
                ),
                (
                    "energytool_available",
                    models.BooleanField(default=False, verbose_name="Energytool"),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configuration",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuration",
                "verbose_name_plural": "Configurations",
            },
        ),
        migrations.CreateModel(
            name="SettingsGeneralModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "general_pause",
                    models.BooleanField(default=False, verbose_name="General pause"),
                ),
                (
                    "general_flow_alarm",
                    models.BooleanField(
                        default=False, verbose_name="General flow alarm"
                    ),
                ),
                (
                    "general_offcontact",
                    models.IntegerField(
                        choices=[(0, "Off"), (1, "N/O"), (2, "N/C")],
                        default=0,
                        verbose_name="General Off Contact Regulation",
                    ),
                ),
                (
                    "general_alarm",
                    models.IntegerField(
                        choices=[(0, "N/O"), (1, "N/C")],
                        default=0,
                        verbose_name="General alarm",
                    ),
                ),
                (
                    "general_ph_rx_pump_volume",
                    models.IntegerField(
                        choices=[(0, "1.5 l/h"), (1, "3 l/h")],
                        default=0,
                        verbose_name="pH Rx Pump volume",
                    ),
                ),
                (
                    "general_boot_delay",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Boot delay (s)",
                    ),
                ),
                (
                    "general_standby_time",
                    poolAPI.models.IntegerRangeField(
                        default=0,
                        validators=[django.core.validators.MaxValueValidator(999)],
                        verbose_name="Standy time (s)",
                    ),
                ),
                (
                    "general_language",
                    models.IntegerField(
                        choices=[
                            (0, "Nederlands"),
                            (1, "English"),
                            (2, "Deutsch"),
                            (2, "Français"),
                        ],
                        default=0,
                        verbose_name="General language",
                    ),
                ),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings_general",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Settings General",
                "verbose_name_plural": "Settings General",
                "indexes": [
                    models.Index(
                        fields=["poolsetting"], name="poolAPI_set_poolset_7b1136_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="RealTimeMeasurement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "water_temperature",
                    models.FloatField(
                        default=20, verbose_name=("Water Temperature", "°C")
                    ),
                ),
                (
                    "ambient_temperature",
                    models.FloatField(
                        default=20, verbose_name=("Ambient Temperature", "°C")
                    ),
                ),
                (
                    "solar_temperature",
                    models.FloatField(
                        default=20, verbose_name=("Solar Temperature", "°C")
                    ),
                ),
                (
                    "filterpump_current",
                    models.FloatField(
                        default=1, verbose_name=("Filterpump current", "mA")
                    ),
                ),
                ("ph_actual", models.FloatField(default=7, verbose_name=("pH", ""))),
                (
                    "rx_actual",
                    models.FloatField(default=200, verbose_name=("Rx level", "mV")),
                ),
                (
                    "tds_ppm",
                    models.IntegerField(
                        default=200,
                        help_text="Raw value of the TDS sensor, measures conductivity (salt or pollution), not sent to cloud.",
                        verbose_name=("TDS", "ppm"),
                    ),
                ),
                (
                    "pollution_degree_ppm",
                    models.IntegerField(
                        default=100,
                        help_text="Measured by TDS sensor, same value as tds_ppm.",
                        verbose_name=("Pollution", "ppm"),
                    ),
                ),
                (
                    "conductivity",
                    models.FloatField(
                        default=0.01,
                        help_text="salt/conductivity (measured by TDS sensor) = pollution degree ppm /  1.56.",
                        verbose_name=("Conductivity", "S"),
                    ),
                ),
                (
                    "clm_ppm",
                    models.FloatField(
                        default=0.0,
                        help_text="Clm chlorine",
                        verbose_name=("Chlorine", "ppm"),
                    ),
                ),
                (
                    "empty_tank",
                    models.BooleanField(default=False, verbose_name="Empty tank"),
                ),
                (
                    "imx_temperature",
                    models.FloatField(default=0.0, verbose_name="IMX Temperature"),
                ),
                (
                    "main_temperature",
                    models.FloatField(default=0.0, verbose_name="Main temperature"),
                ),
                ("date_time", models.DateTimeField(default=django.utils.timezone.now)),
                ("error", models.IntegerField(default=0)),
                (
                    "poolsetting",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="realtimedata",
                        to="poolAPI.poolsetting",
                    ),
                ),
            ],
            options={
                "verbose_name": "Real time measurement",
                "verbose_name_plural": "Real time measurements",
                "indexes": [
                    models.Index(
                        fields=["poolsetting"], name="poolAPI_rea_poolset_82f46a_idx"
                    ),
                    models.Index(
                        fields=["date_time"], name="poolAPI_rea_date_ti_1cdd16_idx"
                    ),
                    models.Index(fields=["error"], name="poolAPI_rea_error_a48a55_idx"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="poolsetting",
            index=models.Index(
                fields=["poolnumber"], name="poolAPI_poo_poolnum_3a184d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="poolsetting",
            index=models.Index(
                fields=["poolbuilder"], name="poolAPI_poo_poolbui_5f0c2a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="poolsetting",
            index=models.Index(fields=["owner"], name="poolAPI_poo_owner_i_58cbc1_idx"),
        ),
        migrations.AddIndex(
            model_name="notificationlimitmodel",
            index=models.Index(
                fields=["poolsetting"], name="poolAPI_not_poolset_0ec7fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="historicaldata",
            index=models.Index(
                fields=["poolsetting"], name="poolAPI_his_poolset_7d6552_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="historicaldata",
            index=models.Index(fields=["time"], name="poolAPI_his_time_08fce5_idx"),
        ),
        migrations.AddIndex(
            model_name="controlpanelmodel",
            index=models.Index(
                fields=["poolsetting"], name="poolAPI_con_poolset_f4768d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="configurationmodel",
            index=models.Index(
                fields=["poolsetting"], name="poolAPI_con_poolset_1e0e16_idx"
            ),
        ),
    ]
